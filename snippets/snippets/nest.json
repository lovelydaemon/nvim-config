{
  "nest-module": {
    "prefix": "ns-module",
    "body": [
      "@Module({",
      "\timports: [],",
      "\tcontrollers: [$0Controller],",
      "\tproviders: [$0Service],",
      "\texports: [$0Service],",
      "})",
      "",
      "export class $0Module {}"
    ],
    "description": "nest.js module file"
  },
  "nest-controller": {
    "prefix": "ns-controller",
    "body": [
      "@Controller()",
      "export class $0Controller {",
      "\tconstructor() {}",
      "",
      "\t@Get()",
      "\tlist() {",
      "\t\treturn 'return list collection'",
      "\t}",
      "",
      "\t@Post()",
      "\tcreate() {",
      "\t\treturn 'return created item'",
      "\t}",
      "",
      "\t@Put()",
      "\tupdate() {",
      "\t\treturn 'return updated item'",
      "\t}",
      "",
      "\t@Delete()",
      "\tdelete() {",
      "\t\treturn 'detele item'",
      "\t}",
      "}"
    ],
    "description": "nest.js controller file"
  },
  "nest-test-template-dto": {
    "prefix": "ns-test-dto",
    "body": [
      "import { plainToInstance } from 'class-transformer';",
      "import { validate } from 'class-validator';",
      "",
      "describe('$1', () => {",
      "\ttest('should pass with correct data', async () => {",
      "\t\tconst body = {$0};",
      "\t\tconst dto = plainToInstance($2, body);",
      "",
      "\t\tconst errors = await validate(dto);",
      "\t\tconst hasErrors = errors.length > 0;",
      "",
      "\t\texpect(hasErrors).toBeFalsy();",
      "\t})",
      "})"
    ],
    "description": "nest.js test template for dto"
  },
  "nest-integration-test-template": {
    "prefix": "ns-it",
    "body": [
      "import type { App } from 'supertest/types';",
      "",
      "import { INestApplication } from '@nestjs/common';",
      "import { ConfigModule } from '@nestjs/config';",
      "import { Test } from '@nestjs/testing';",
      "import * as request from 'supertest';",
      "import { DataSource, EntityManager } from 'typeorm';",
      "",
      "import { CacheService } from '#cache/cache.service';",
      "import { DatabaseModule } from '#database/database.module';",
      "import { EnvValidation } from '#utils/env.validation';",
      "",
      "async function resetTable(manager: EntityManager, name: string) {",
      "\tawait manager.query(`TRUNCATE \"${name}\" RESTART IDENTITY CASCADE`);",
      "}",
      "",
      "describe('$1', () => {",
      "\tlet app: INestApplication;",
      "\tlet server: App;",
      "\tlet cache: CacheService;",
      "\tlet manager: EntityManager;",
      "",
      "\tbeforeAll(async () => {",
      "\t\tconst moduleRef = await Test.createTestingModule({",
      "\t\t\timports: [",
      "\t\t\t\tConfigModule.forRoot({",
      "\t\t\t\t\tenvFilePath: '.env.test',",
      "\t\t\t\t\tvalidationSchema: EnvValidation,",
      "\t\t\t\t\tcache: true,",
      "\t\t\t\t}),",
      "\t\t\t\tDatabaseModule,",
      "\t\t\t],",
      "\t\t}).compile();",
      "",
      "\t\tapp = moduleRef.createNestApplication();",
      "\t\tcache = app.get(CacheService);",
      "\t\tmanager = app.get(DataSource).manager;",
      "\t\tserver = app.getHttpServer() as App;",
      "",
      "\t\tawait app.init();",
      "\t});",
      "",
      "\tafterEach(async () => {",
      "\t\tawait cache.reset();",
      "\t\tawait resetTable(manager, '');",
      "\t});",
      "",
      "\tafterAll(async () => {",
      "\t\tawait app.close();",
      "\t});",
      "",
      "\tdescribe('routes', () => {",
      "\t\t});",
      "});"
    ],
    "description": "nest.js test template for integrations"
  },
  "nest-repository-class": {
    "prefix": "ns-repository",
    "body": [
      "import { Injectable } from '@nestjs/common';",
      "import { InjectRepository } from '@nestjs/typeorm';",
      "import { Repository } from 'typeorm';",
      "",
      "@Injectable()",
      "export class $1Repository {",
      "\tconstructor(",
      "\t\t@InjectRepository($2)",
      "\t\tprivate readonly $1Repository: Repository<$2>,",
      "\t) {}",
      "\t$0",
      "}"
    ],
    "description": "nest.js repository template file"
  },
  "nest-usecase-class": {
    "prefix": "ns-usecase",
    "body": [
      "import { Injectable } from '@nestjs/common';",
      "",
      "@Injectable()",
      "export class $1UseCase {",
      "\tconstructor() {}",
      "",
      "\tasync execute() {}",
      "}"
    ],
    "description": "nest.js usecase template file"
  }
}
